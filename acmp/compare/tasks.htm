
<html>
<!-- Design & Programming by Sergey Belyaev, @2006-2011 E-mail: bsn@mail.ru -->
<head>
  <title>acmp.ru - compare</title>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251;charset=windows-1251">
  <meta name="description" content="">
  <meta name="keywords" content="">
  <link rel="stylesheet" type="text/css" href="acmp_files/acmp_sty.css">
</head>
<body>


<h5>
<a href="http://acmp.ru/index.asp?main=user&id=93837" target="_blank">Musin Nurlybek</a>
<br>[TO]<br>
<a href="http://acmp.ru/index.asp?main=user&id=93034" target="_blank">Rustembek Tatlymuratov</a>
<br></h5>
<h1><a href="http://acmp.ru/index.asp?main=task&id_task=11" target="_blank">Задача №11</a><br>Динамическое программирование<br>Зайчик</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 68%)</i></center>
<table width=100%><tr><td>
<p class=text>
В нашем зоопарке появился заяц. Его поместили в клетку, и чтобы ему не было скучно, директор зоопарка распорядился поставить в его клетке лесенку. Теперь наш зайчик может прыгать по лесенке вверх, перепрыгивая через ступеньки. Лестница имеет определенное количество ступенек N. Заяц может одним прыжком преодолеть не более К ступенек. Для разнообразия зайчик пытается каждый раз найти новый путь к вершине лестницы. Директору любопытно, сколько различных способов есть у зайца добраться до вершины лестницы при заданных значениях K и N. Помогите директору написать программу, которая поможет вычислить это количество.
Например, если K=3 и N=4, то существуют следующие маршруты: 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2, 1+3, 3+1. Т.е. при данных значениях у зайца всего 7 различных маршрутов добраться до вершины лестницы.
</p>
</td>
<td>
<img src="acmp_files/image002.gif">
</td>
<tr></table>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записаны два натуральных числа K и N (1 &#8804; K &#8804; N &#8804; 300). К - максимальное количество ступенек, которое может преодолеть заяц одним прыжком, N – общее число ступенек лестницы.
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести количество возможных вариантов различных маршрутов зайца на верхнюю ступеньку лестницы без ведущих нулей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>1 3</td><td>1</td></tr>
<tr class=white2><td align=center>2</td><td>2 7</td><td>21</td></tr>
<tr class=white2><td align=center>3</td><td>3 10</td><td>274</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=19" target="_blank">Задача №19</a><br>Простая математика<br>Ферзь, ладья и конь</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
<img src="acmp_files/image005.gif" align=right>
На шахматной доске 8х8 расположены три фигуры: ферзь, ладья и конь. Требуется определить количество пустых полей доски, которые находятся под боем. Для простоты будем полагать, что фигуры могут «бить» через другие фигуры. Например, в рассмотренной справа ситуации будем считать, что ферзь бьет D5 через ладью.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записаны через пробел координаты расположения трех фигур: ферзя, ладьи и коня соответственно. Каждая координата состоит из одного латинского символа (от A до H) и одной цифры (от 1 до 8).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести количество пустых полей, которые бьют указанные во входных данных фигуры.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>D1 D3 E5</td><td>29</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=54" target="_blank">Задача №54</a><br>Двумерные массивы<br>Теория игр</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Одним из интересных объектов, изучаемых в теории игр, являются так называемые антагонистические игры двух лиц. Такие игры характеризуются множеством X стратегий первого игрока, множеством Y стратегий второго игрока и функцией выигрыша K(x, y) (x из X, y из Y). Если множества стратегий X и Y конечны, то такую игру принято называть матричной, так как функцию выигрыша K в этом случае удобно задавать матрицей.
</p>
<p class=text>
Рассмотрим матричную игру, в которой X = {1,…,n}, Y = {1,…,m}. Матрицу выигрышей обозначим символом K. Нижним значением игры назовем число 
max<sub>i=1..n</sub>min<sub>j=1..m</sub> K<sub>ij</sub> . Верхним значением игры назовем число min<sub>j=1..m</sub>max<sub>i=1..n</sub> K<sub>ij</sub>. Отметим также, что игры, у которых нижнее и верхнее значение совпадают, называются играми с седловой точкой.
</p>
<p class=text>
Задана матрица выигрышей K для некоторой матричной игры. Найдите ее верхнее и нижнее значение.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целые числа n и m 
(1 &#8804; n,m &#8804; 100). Далее следуют n строк по m чисел в каждой. j-ое число i-ой строки равно K<sub>ij</sub> . Все K<sub>ij</sub> по модулю не превосходят 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите нижнее и верхнее значение игры через пробел.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3 3<br>
4 -1 -3<br>
-2 1 3<br>
0 2 -3
</td><td valign=top>-2 2</td></tr>
<tr class=white2><td align=center>2</td><td>3 4<br>
-1 0 2 1<br>
-2 0 1 0<br>
2 1 -1 -2
</td><td valign=top>-1 1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=56" target="_blank">Задача №56</a><br>Сортировка и последовательности<br>Jивой Jурнал</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Программист Саша участвует в создании блог-сервиса Jивой Jурнал. Планируется, что этот сервис будет предоставлять гораздо больше возможностей, чем известный всем LiveJournal. В настоящее же время проблему составляет реализация всех базовых возможностей LiveJournal'а. Одной из таких возможностей является поддержка списков друзей для пользователей.
</p>
<p class=text>
Заданы: список пользователей, являющихся друзьями данного пользователя, и список пользователей, у которых данный пользователь содержится в списке друзей.
</p>
<p class=text>
Необходимо получить список друзей данного пользователя (Friends), список его взаимных друзей (Mutual Friends), и список тех пользователей, у кого данный пользователь содержится в списке друзей, но которые не являются его взаимными друзьями (Also Friend of).
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число n (0 &#8804; n &#8804; 200) друзей данного пользователя. Последующие n строк содержат каждая по одному имени пользователя, который является другом данного. (n + 2)-ая строка содержит число m (0 &#8804; m &#8804; 200) пользователей, у которых данный содержится в списке друзей. Далее заданы имена пользователей, у которых данный находится в списке друзей. Эти пользователи заданы в том же формате, что и друзья данного. 
</p>
<p class=text>
Имена пользователей - строки длиной не более 20 символов, содержащие только строчные буквы латинского алфавита и символы тире ("-"). Каждый пользователь указан не более одного раза в каждом из списков.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести список друзей данного пользователя (Friends), список его взаимных друзей (Mutual Friends), и список тех пользователей, у кого данный пользователь содержится в списке друзей, но которые не являются его взаимными друзьями (Also Friend of). В каждом списке пользователи должны быть отсортированы по алфавиту. Следуйте формату, приведенному в примерах.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
vasya-pupkin<br>
bill-hates<br>
ivan-ivanov<br>
2<br>
vasya-pupkin<br>
destroyer
</td><td valign=top>Friends: bill-hates, ivan-ivanov, vasya-pupkin<br>
Mutual Friends: vasya-pupkin<br>
Also Friend of: destroyer
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0<br>
0
</td><td valign=top>Friends:<br>
Mutual Friends:<br>
Also Friend of:
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=58" target="_blank">Задача №58</a><br>Двумерные массивы<br>Проверка на симпатичность</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Рассмотрим таблицу, содержащую n строк и m столбцов, в каждой клетке которой расположен ноль или единица. Назовем такую таблицу симпатичной, если в ней нет ни одного квадрата 2 на 2, заполненного целиком нулями или целиком единицами.
</p>
<p class=text>
Так, например, таблица 4 на 4, расположенная слева, является симпатичной, а расположенная справа таблица 3 на 3 - не является.
</p>
<center><img src="acmp_files/image006.gif"></center>
<p class=text>
Задано несколько таблиц. Необходимо для каждой из них выяснить, является ли она симпатичной.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит количество t (1 &#8804; t &#8804; 10) наборов входных данных. Далее следуют описания этих наборов. Описание каждого набора состоит из строки, содержащей числа n и m (1 &#8804; n,m &#8804; 100), и n строк, каждая из которых содержит по m чисел, разделенных пробелами. j-ое число в i+1-ой строке описания набора входных данных - элемент a<sub>ij</sub> соответствующей таблицы. Гарантируется, что все a<sub>ij</sub> равны либо нулю, либо единице.
</p>

<h2>Выходные данные</h2>

<p class=text>
Для каждого набора входных данных выведите в файл OUTPUT.TXT единственную строку, содержащую слово «YES», если соответствующая таблица является симпатичной, и слово «NO» - в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3<br>
1 1<br>
0<br>
4 4<br>
1 0 1 0<br>
1 1 1 0<br>
0 1 0 1<br>
0 0 0 0<br>
3 3<br>
0 0 1<br>
0 0 1<br>
1 1 1
</td><td valign=top>YES<br>
YES<br>
NO
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=59" target="_blank">Задача №59</a><br>Целочисленная арифметика<br>Несложное вычисление</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Задано натуральное число n. Необходимо перевести его в k-ичную систему счисления и найти разность между произведением и суммой его цифр в этой системе счисления.
</p>
<p class=text>
Например, пусть n = 239, k = 8. Тогда представление числа n в восьмеричной системе счисления — 357, а ответ на задачу равен 3 &#215; 5 &#215; 7 &#8722; (3 + 5 + 7) = 90.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа: n и k (1 &#8804; n &#8804; 10<sup>9</sup>, 2 &#8804; k &#8804; 10). Оба этих числа заданы в десятичной системе счисления.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу (в десятичной системе счисления).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>239 8</td><td>90</td></tr>
<tr class=white2><td align=center>2</td><td>1000000000 7</td><td>-34</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=64" target="_blank">Задача №64</a><br>Сортировка и последовательности<br>Простой ряд</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Простым числом называется натуральное число (большее 1), которое делится нацело только на 1 и на само себя. Например, числа 2, 3, 5, 7, 11 и 23 - простые . Назовем простым рядом последовательность цифр, полученную следующим образом: подряд идущие по возрастанию простые числа (начиная с 2) записываются друг за другом. Начало данного ряда выглядит так: 23571113171923… Необходимо найти цифру, стоящую в простом ряду на указанном месте. Нумерация позиций начинается с единицы.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано натуральное число M – количество тестов. Во второй строке записано M чисел через пробел, каждое число – номер позиции в простом ряду (1 &#8804;  M &#8804; 1000, 1 &#8804; номер позиции &#8804; 10000). 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT для каждой позиции выведите цифру из простого ряда, стоящую на этой позиции. Вывести следует M цифр в одной строке, не разделяя цифры пробелами.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3<br> 
1 4 11
</td><td valign=top>271</td></tr>
<tr class=white2><td align=center>2</td><td>5<br>
2 5 6 8 12
</td><td valign=top>31139</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=71" target="_blank">Задача №71</a><br>Комбинаторика<br>Две кучки камней</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<p class=text>
У Вас есть N камней с массами W<sub>1</sub>, W<sub>2</sub> , … W<sub>N</sub>. Требуется разложить камни на 2 кучки так, чтобы разница масс этих кучек была минимальной.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число N – количество камней (1 &#8804; N &#8804; 18). Во второй строке через пробел перечислены массы камней W<sub>1</sub>, W<sub>2</sub> , … W<sub>N</sub> (1 &#8804; W<sub>i</sub> &#8804; 10<sup>5</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести одно неотрицательное целое число – минимально возможную разницу между массами  двух кучек.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>5 8 13 27 14</td><td valign=top>3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=95" target="_blank">Задача №95</a><br>Разбор строк<br>Нумеролог</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 24%)</i></center>
<p class=text>
Чтобы предсказать судьбу человека, нумеролог берет время жизни человека в секундах, затем складывает все цифры этого числа. Если полученное число состоит более чем из одной цифры, операция повторяется, пока в числе не останется одна цифра. Затем по полученной цифре и числу операций, необходимых для преобразования числа в цифру нумеролог предсказывает судьбу человека. Нумеролог плохо умеет считать, а числа, с которыми он работает, могут быть очень большими. Напишите программу, которая бы делала все расчеты за него.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число N – время жизни человека в секундах (1 &#8804; N &#8804; 10<sup>1000</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите два числа через пробел: полученную цифру из числа N и число преобразований.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>1 0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10</td><td valign=top>1 1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>99</td><td valign=top>9 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=96" target="_blank">Задача №96</a><br>Математическое моделирование<br>Винни-пух</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
<img src="acmp_files/image00A.gif" align=right>
Вини-Пух стоит на прямоугольном поле размером N*M клеток. В каждой клетке растет по одной ягоде. В начальный момент времени он стоит на левой верхней клетке. Он  начинает собирать ягоды по верхнему краю поля. Если он доходит до края поля или до пустой клетки, он поворачивается на 90 градусов вправо и продолжает собирать ягоды. Но дойдя до очередной клетки Вини вспоминает, что его ждет Пятачок, и он уходит с поля.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT стоят размеры поляны N и M (0 < N, M &#8804; 100) – высота и ширина, во второй числа Y и X (0 < Y &#8804; N, 0 < X &#8804; M) –номера строки и столбца клетки, дойдя до которой Вини-Пух прекращает собирать ягоды.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите число ягод, которые соберет Пух.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1<br>1 1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 3<br>2 3</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5 5<br>2 3</td><td valign=top>18</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=98" target="_blank">Задача №98</a><br>Математическое моделирование<br>Игра в числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Игра в числа ведётся на одномерном массиве целых положительных чисел. Перед началом, жеребьёвкой определяется, кто будет ходить первым (первый игрок), а кто – вторым (второй игрок). Процесс игры состоит в том, что игроки по очереди (сначала первый игрок, затем второй, следом опять первый и так далее) вычёркивают числа из массива. Вычеркнуть можно только число, находящееся в конце или начале оставшегося массива. При этом всегда вычёркивается максимальное число из этих двух. Если первое и последнее числа массива равны, то вычёркивается первое. Игра продолжается до того момента, пока не будут вычеркнуты все числа. Каждое вычеркнутое число идёт в актив тому игроку, который его вычеркнул. После окончания игры каждый игрок суммирует вычеркнутые им числа. Победителем объявляется тот, кто наберет больше очков. 
</p>
<p class=text>
Некоторые игроки поняли, что результат не зависит от стратегии игры, и решили попросить Вас написать программу для получения результата.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится одно целое число N – количество чисел в массиве (1 &#8804; N &#8804; 10<sup>4</sup>). Во второй строке находятся N целых положительных чисел из диапазона [1, 32000], разделённых пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите два числа, разделенные двоеточием. Первое число – количество очков, набираемых первым игроком при игре на этом массиве, второе число – для второго.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>4 4 1 5 4</td><td valign=top>9:9</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1<br>1234</td><td valign=top>1234:0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=126" target="_blank">Задача №126</a><br>Теория графов<br>Издевательство</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<i>
<p class=text>
Штирлиц ехал на машине, увидел голосующего Бормана, и проехал мимо. Через некоторое время он снова увидел голосующего Бормана, и снова проехал мимо. Вскоре он опять увидел голосующего Бормана.<br>
 - Издевается! - подумал Борман.<br>
 - Кольцевая! - догадался Штирлиц.<br>
</p>
</i>
<p class=text>
В городе N площадей. Любые две площади соединены между собой ровно одной дорогой с двусторонним движением. В этом городе живет Штирлиц. У Штирлица есть хобби - он любит воскресным утром выйти из дома, сесть в машину, выбрать какой-нибудь кольцевой маршрут, проходящий ровно по трем площадям (то есть сначала он едет с какой-то площади на какую-то другую, потом - на третью, затем возвращается на начальную, и опять едет по этому маршруту). Он воображает, что где-то на этом пути стоит Борман. И так вот ездит Штирлиц все воскресенье, пока голова не закружится, и радуется...
</p>
<p class=text>
Естественно, что Штирлицу хочется проезжать мимо точки, в которой, как он воображает, стоит Борман, как можно чаще. Для этого, естественно, выбранный Штирлицем маршрут должен быть как можно короче. Напишите программу, которая выберет оптимальный для Штирлица маршрут.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано сначала число N (3 <= N <= 100), а затем матрица NxN расстояний между площадями (число в позиции i,j обозначает длину дороги, соединяющей i-ую и j-ую площади). Все числа в матрице (кроме стоящих на главной диагонали) - натуральные, не превышающие 1000. Матрица симметрична относительно главной диагонали, на главной диагонали стоят 0.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите длину оптимального маршрута.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
0 20 10 30 40<br>
20 0 30 1 2<br>
10 30 0 40 1000<br>
30 1 40 0 21<br>
40 2 1000 21 0
</td><td valign=top>24</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=128" target="_blank">Задача №128</a><br>Теория графов<br>Один конь</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<p class=text>
На шахматной доске NxN в клетке (x1,y1) стоит голодный шахматный конь. Он хочет попасть в клетку (x2,y2), где растет вкусная шахматная трава. Какое наименьшее количество ходов он должен для этого сделать?
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит пять чисел: N, x1, y1, x2, y2 (5 <= N <= 20, 1 <= x1, y1, x2, y2 <= N). Левая верхняя клетка доски имеет координаты (1,1), правая нижняя - (N,N).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести наименьшее число ходов коня.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
1 1<br>
3 1
</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=130" target="_blank">Задача №130</a><br>Теория графов<br>Два коня</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 55%)</i></center>
<p class=text>
На стандартной шахматной доске (8х8) живут 2 шахматных коня: красный и зеленый. Обычно они беззаботно скачут по просторам доски, пощипывая шахматную травку, но сегодня особенный день: у зеленого коня день рождения. зеленый конь решил отпраздновать это событие вместе с красным. Но для осуществления этого прекрасного плана им нужно оказаться на одной клетке. Заметим, что красный и зеленый шахматные кони сильно отличаются от черного с белым: они ходят не по очереди, а одновременно, и если оказываются на одной клетке, никто никого не съедает. Сколько ходов им потребуется, чтобы насладиться праздником?
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT содержатся координаты коней, записанные по стандартным шахматным правилам (т.е. двумя символами - маленькая латинская буква (от a до h) и цифра (от 1 до 8), задающие столбец и строку соответственно).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать наименьшее необходимое количество ходов, либо -1, если кони не могут встретиться.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>a1 a3</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=141" target="_blank">Задача №141</a><br>Теория графов<br>Дерево</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 42%)</i></center>
<p class=text>
Неориентированный граф без петель и кратных ребер задан матрицей смежности. Требуется определить, является ли этот граф деревом.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано сначала число N - количество вершин графа (от 1 до 100). Далее записана матрица смежности размером N*N, в которой 1 обозначает наличие ребра, 0 - его отсутствие. Матрица симметрична относительно главной диагонали.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите сообщение YES, если граф является деревом, и NO в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>0 1 0<br>
1 0 1<br>
0 1 0
</td><td valign=top>YES</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=150" target="_blank">Задача №150</a><br>Теория графов<br>Друзья</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
В клубе N человек. Многие из них - друзья. Так же известно, что друзья друзей так же являются друзьями. Требуется выяснить, сколько всего друзей у конкретного человека в клубе.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT заданы два числа: N и S (1 <= N <= 100; 1 <= S <= N), где N - количество человек в клубе, а S – номер конкретного человека. В следующих N строках записано по N чисел - матрица смежности, состоящая из единиц и нулей. Причем единица, стоящая в i-й строке и j-м столбце гарантирует, что люди с номерами i и j – друзья, а 0 – выражает неопределенность.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество гарантированных друзей у человека с номером S, помня о транзитивности дружбы.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 1<br>
0 1 0<br>
1 0 1<br>
0 1 0
</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=157" target="_blank">Задача №157</a><br>Комбинаторика<br>Карточки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
На день рождения Пете подарили набор карточек с буквами. Теперь Петя с большим интересом составляет из них разные слова. И вот, однажды, составив очередное слово, Петя заинтересовался вопросом: "А сколько различных слов можно составить из тех же карточек, что и данное?". 
</p>
<p class=text>
Помогите ему ответить на этот вопрос. 
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано слово, составленное Петей - строка из маленьких латинских букв не длиннее 15 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно целое число - ответ на поставленную задачу.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>solo</td><td valign=top>12</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=159" target="_blank">Задача №159</a><br>Комбинаторика<br>Обратная перестановка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
По заданной перестановке требуется определить обратную.  
</p>
<p class=text>
<i>Перестановкой</i> из N элементов называется упорядоченный набор из N различных чисел от 1 до N. Количество различных перестановок порядка N равно P<sub>N</sub> = N!
</p>
<p class=text>
Пусть у нас есть упорядоченное множество из N элементов. Перестановка задает преобразование этого множества. А именно, она говорит, что на i место нужно поставить ai элемент множества, где a<sub>i</sub> - i-тый элемент перестановки. 
</p>
<p class=text>
<i>Обратной перестановкой</i> к перестановке &#960; называется такая перестановка &#960;<sup>-1</sup>, что &#960;&#960;<sup>-1</sup> = &#960;<sup>-1</sup>&#960; = &#949;, где &#949; – тождественная перестановка.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число 0 < N <= 20000 - порядок перестановки. Во второй строке записана сама перестановка.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите обратную перестановку.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>2 3 1</td><td valign=top>3 1 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=192" target="_blank">Задача №192</a><br>Комбинаторика<br>Следующая перестановка ...</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
<i>Перестановкой</i> из N элементов называется упорядоченный набор из N различных чисел от 1 до N. 
</p>
<p class=text>
Найдите по заданной перестановке следующую в лексикографическом порядке (будем считать, что за перестановкой (N, N-1, ... , 3, 2, 1) следует тождественная перестановка, то есть (1, 2, 3, ... , N)).
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержится число N (1 <= N <= 10<sup>4</sup>). Во второй строке содержится перестановка (последовательность натуральных чисел от 1 до N, разделенных пробелами).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать искомую перестановку.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>2 4 5 3 1</td><td valign=top>2 5 1 3 4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=196" target="_blank">Задача №196</a><br>Двумерные массивы<br>Спираль</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
<img src="acmp_files/image00N.gif" align=right alt="Спираль">
Требуется совершить обход квадратной матрицы по спирали так, как показано на рисунке справа: заполнение происходит с единицы из левого верхнего угла и заканчивается в центре числом N<sup>2</sup>, где N – порядок матрицы.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано натуральное число N – размер квадратной матрицы (N<=100).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите матрицу, заполненную числами от 1 до N<sup>2</sup> по спирали, при этом между числами может быть любое количество пробелов.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5</td><td valign=top> 1  2  3  4   5<br>
16 17 18 19  6<br>
15 24 25 20  7<br>
14 23 22 21  8<br>
13 12 11 10  9
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=197" target="_blank">Задача №197</a><br>Двумерные массивы<br>Змейка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
<img src="acmp_files/image00O.gif" alt="Змейка" align=right>
Требуется заполнить змейкой квадратную матрицу так, как показано на рисунке справа: заполнение происходит с единицы из левого верхнего угла и заканчивается в правом нижнем числом N<sup>2</sup>, где N – порядок матрицы.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано натуральное число N – размер квадратной матрицы (N<=100).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите матрицу, заполненную числами от 1 до N<sup>2</sup> змейкой, при этом между числами может быть любое количество пробелов.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>1  3  4 10<br>
 2  5  9 11<br>
 6  8 12 15<br>
 7 13 14 16
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=224" target="_blank">Задача №224</a><br>Сортировка и последовательности<br>Наибольшее произведение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Дано N целых чисел. Требуется выбрать из них три таких числа, произведение которых максимально.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано сначала число N — количество чисел в последовательности (3&#8804;N&#8804;10<sup>6</sup>). Далее записана сама последовательность: N целых чисел, по модулю не превышающих 30000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите значение наибольшего произведения искомых трех чисел.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>9<br>
3 5 1 7 9 0 9 -3 10
 </td><td valign=top>810</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>
-5 -30000 -12
 </td><td valign=top>-1800000</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=225" target="_blank">Задача №225</a><br>Динамическое программирование<br>Покупка билетов</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<p class=text>
За билетами на премьеру нового мюзикла выстроилась очередь из N человек, каждый из которых хочет купить 1 билет. На всю очередь работала только одна касса, поэтому продажа билетов шла очень медленно, приводя «постояльцев» очереди в отчаяние. Самые сообразительные быстро заметили, что, как правило, несколько билетов в одни руки кассир продаёт быстрее, чем когда эти же билеты продаются по одному. Поэтому они предложили нескольким подряд стоящим людям отдавать деньги первому из них, чтобы он купил билеты на всех.
</p>
<p class=text>
Однако для борьбы со спекулянтами кассир продавала не более 3-х билетов в одни руки, поэтому договориться таким образом между собой могли лишь 2 или 3 подряд стоящих человека.
</p>
<p class=text>
Известно, что на продажу i-му человеку из очереди одного билета кассир тратит Ai секунд, на продажу двух билетов — Bi секунд, трех билетов — Ci секунд. Напишите программу, которая подсчитает минимальное время, за которое могли быть обслужены все покупатели.
</p>
<p class=text>
Обратите внимание, что билеты на группу объединившихся людей всегда покупает первый из них. Также никто в целях ускорения не покупает лишних билетов (то есть билетов, которые никому не нужны).
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано сначала число N — количество покупателей в очереди (1&#8804;N&#8804;5000). Далее идет N троек натуральных чисел Ai, Bi, Ci. Каждое из этих чисел не превышает 3600. Люди в очереди нумеруются, начиная от кассы.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число — минимальное время в секундах, за которое могли быть обслужены все покупатели.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
5 10 15<br>
2 10 15<br>
5 5 5<br>
20 20 1<br>
20 1 1
</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>
3 4 5<br>
1 1 1
</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=254" target="_blank">Задача №254</a><br>Структуры данных<br>Выборы жрецов</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
В стране Олимпиадии снова выборы.
</p>
<p class=text>
Страна состоит из маленьких графств. Графства объединяются в конфедерации. Каждая конфедерация раз в год выбирает себе покровителя – одного из 200 жрецов. Этот ритуал называется Великими Перевыборами Жрецов и выглядит так: конфедерации одновременно подают заявления (одно от конфедерации) в Совет Жрецов о том, кого они хотели бы видеть своим покровителем (если заявление не подано, то считают, что конфедерация хочет оставить себе того же покровителя). После этого все заявки удовлетворяются. Если несколько конфедераций выбирают одного и того же Жреца, то они навсегда объединяются в одну. Таким образом, каждый Жрец всегда является покровителем не более чем одной конфедерации. Требуется написать программу, позволяющую Совету Жрецов выяснить номер Жреца-покровителя каждого графства после Великих Перевыборов. В Совете все графства занумерованы (начиная с 1). Все Жрецы занумерованы числами от 1 до 200 (некоторые из них сейчас могут не быть ничьими покровителями).
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано число N – количество графств в стране (1<=N<=5000) – и далее для каждого графства записан номер Жреца-покровителя конфедерации, в которую оно входит (графства считаются по порядку их номеров). Затем указаны заявления от конфедераций. Сначала записано число M – количество поданных заявлений, а затем M пар чисел (1<=M<=200): первое число – номер текущего Жреца-покровителя, второе – номер желаемого Жреца-покровителя.
</p>
<p class=text>
Все числа во входном файле разделяются пробелами и (или) символами перевода строки.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT вывести для каждого графства одно число – номер его Жреца-покровителя после Великих Перевыборов. Сначала – для первого графства, затем – для второго и т.д.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>
1 1 5 3 1 5 1<br>
2<br>
5 1<br>
1 3
</td><td valign=top>3 3 1 3 3 1 3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=270" target="_blank">Задача №270</a><br>Разбор строк<br>Java vs C++</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 44%)</i></center>
<p class=text>
Сторонники языков Java и C++ часто спорят о том, какой язык лучше для решения олимпиадных задач. Одни говорят, что в Java есть масса полезных библиотек для работы со строками, хорошо реализованы механизмы чтения и вывода данных, а так же радует встроенные возможности для реализации длинной арифметики. С другой стороны, С++ является классическим языком, скорость выполнения программ благодаря существующим компиляторам (например, Intel Compiler 10.0) гораздо выше, чем у Java.
</p>
<p class=text>
Но сейчас нас интересует лишь небольшие отличия, а именно соглашения, которыми пользуются программисты при описании имен переменных в Java и C++. Известно, что для понимания значений переменных часто используют английские слова или даже целые предложения, описывающие суть переменных, содержащих те или иные значения. Приведем ниже правила описания переменных, которыми руководствуются программисты, реализующие программы на Java и C++.
</p>
<p class=text>
В языке Java принято первое слово, входящее в название переменной записывать с маленькой латинской буквы, следующее слово идет с большой буквы (только первая буква слова большая), слова не имеют разделителей и состоят только из латинских букв. Например, правильные записи переменных в Java могут выглядеть следующим образом: javaIdentifier, longAndMnemonicIdentifier, name, nEERC.
</p>
<p class=text>
В языке C++ для описания переменных используются только маленькие латинские символы и символ «_», который отделяет непустые слова друг от друга. Примеры: java_identifier, long_and_mnemonic_identifier, name, n_e_e_r_c.
</p>
<p class=text>
Вам требуется написать программу, которая преобразует переменную, записанную на одном языке в формат другого языка.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано наименование переменной длиной не более 100 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT требуется вывести аналог имени переменной в другом языке. Т.е. если переменная представлена в формате Java, то следует перевести в формат C++ и наоборот. В том случае, когда имя переменной не соответствует ни одному из вышеописанных языков, следует вывести «Error!»
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>long_and_mnemonic_identifier</td><td valign=top>longAndMnemonicIdentifier</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>anotherExample</td><td valign=top>another_example</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>i</td><td valign=top>i</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>bad_Style</td><td valign=top>Error!</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=274" target="_blank">Задача №274</a><br>Целочисленная арифметика<br>Дружные числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Будем называть два числа дружными, если они состоят из одних и тех же цифр. Например, числа 1132 и 32321 являются дружными, а 12 и 123 – нет (в первом числе нет цифры 3). Требуется написать программу, которая определит, являются ли два заданных числа дружными.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит в первой строке натуральное число K – количество тестов. Количество тестов не превышает 10. В следующих K строках содержатся по два целых числа A и B, разделенные одним пробелом (0 < A < 10<sup>9</sup>, 0 < B < 10<sup>9</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной текстовый файл OUTPUT.TXT должен содержать K строк. Для каждого теста в отдельной строке надо выдать сообщение “YES”, если A и B являются дружными, или “NO”, если не являются. В сообщениях кавычки не печатать.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>1132 32321</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>12 123<br>11 111</td><td valign=top>NO<br>YES</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=283" target="_blank">Задача №283</a><br>Разбор строк<br>Рунные слова</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Руны — это древние магические знаки, которые наши предки использовали как буквы. Говорят, что рунные знаки обладают магическими свойствами, а при сложении рун в слова их магическая сила многократно возрастает. Если кузнец изготовит доспехи и начертит там определенные руны в определенном порядке, то доспехи будут наделены необычайными магическими силами.
</p>
<p class=text>
Для того, чтобы стать обладателем таких доспехов достаточно просто принести кузнецу начертания этих рунных знаков. А вот, чтобы стать обладателем рунного знака приходилось немало потрудиться. Воины добывали начертания рун других языков и наречий в боях или получали их в качестве наград в благодарность за оказанные услуги.
</p>
<p class=text>
Но так или иначе и в этом деле развелись жулики. По подозрениям ученых кузнец Игнатус Мошеникус изготавливал благородным воинам фальшивые рунные слова. Из древних преданий ученым стало достоверно известно, что каждая руна записывается из двух, трех или четырех латинских букв. Причем первая буква рунного слова всегда записывается как заглавная, а все остальные являются маленькими. Ученые перевели несколько, выкованных этим кузнецом, рунных слов на латинский язык и теперь нуждаются в Вашей помощи. Проверьте, является ли приведенное слово рунным.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT содержится слово. Оно представляет собой непустую строку, длиной не более 100000 символов, содержащую только большие и маленькие буквы латинского алфавита.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите «Yes», если слово является рунным и  «No» в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>IoIsTheBest</td><td valign=top>Yes</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>IoItIsWaste</td><td valign=top>No</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=314" target="_blank">Задача №314</a><br>Сортировка и последовательности<br>Лексикографический порядок чисел</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Натуральные числа от 1 до N упорядочены лексикографически. Например, для N=25 результат этого упорядочения будет таким: 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9.
</p>
<p class=text>
Требуется написать программу, которая определит, на каком месте оказалось число K.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа N и K, записанных через пробел (1 &#8804; K &#8804; N &#8804; 10<sup>4</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно натуральное число – номер места, на котором оказалось число K.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>25 17</td><td valign=top>9</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=315" target="_blank">Задача №315</a><br>Задачи для начинающих<br>Наименьшая система счисления</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Известно, что основанием позиционной системы счисления называют количество различных символов, используемых для записи чисел в данной системе счисления. Также известно, что любое число x в b-ичной системе счисления имеет вид x=a<sub>0</sub>&#8729;b<sup>0</sup>+a<sub>1</sub>&#8729;b<sup>1</sup>+…+a<sub>n</sub>&#8729;b<sup>n</sup>, где b &#8805; 2 и 0 &#8804; a<sub>i</sub> < b.
</p>
<p class=text>
Для записи чисел в b-ичной системе счисления, где b &#8804; 36, могут быть использованы первые b символов из следующего списка 0,1,…, 9, A, B, …, Z. Например, для записи чисел в троичной системы используются символы 0, 1, 2, а в двенадцатеричной - 0,1,…, 9, A, B.
</p>
<p class=text>
Требуется написать программу, которая по входной строке S определит, является ли данная строка записью числа в системе счисления, с основанием не большим 36, и, если является, определит минимальное основание этой системы счисления.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в единственной строке входную строку. Длина строки не превышает 255. Все символы строки имеют коды от 32 до 127.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число. Если строка является записью числа в некоторой системе счисления, то нужно вывести минимальное основание такой системы счисления. Иначе вывести -1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>123</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>ABCDEF</td><td valign=top>16</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>AD%AF</td><td valign=top>-1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=322" target="_blank">Задача №322</a><br>Разбор строк<br>Слово</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Числа Фибоначчи строятся следующим образом: первые два равны единице, а каждое следующее равно сумме двух предыдущих. Например, первые десять чисел Фибоначчи равны: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. В заданном тексте символы нумеруются слева направо, начиная с единицы.
</p>
<p class=text>
Требуется написать программу, которая составит слово из символов, номера которых совпадают с числами Фибоначчи.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в единственной строке текст, состоящий из латинских строчных букв. В тексте не более 30000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать слово из символов, номера которых совпадают с числами Фибоначчи. Символы слова идут в том же порядке, что и в заданном тексте.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>a</td><td valign=top>a</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>abc</td><td valign=top>abc</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>abcdefghij</td><td valign=top>abceh</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=323" target="_blank">Задача №323</a><br>Целочисленная арифметика<br>Гипотеза Гольдбаха</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Известно, что любое чётное число, большее 2, представимо в виде суммы 2 простых чисел, причём таких разложений может быть несколько. Впервые гипотезу о существовании данного разложения сформулировал математик Х. Гольдбах.
</p>
<p class=text>
Требуется написать программу, производящую согласно утверждению Гольдбаха, разложение заданного чётного числа. Из всех пар простых чисел, сумма которых равна заданному числу, требуется найти пару, содержащую наименьшее простое число.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит чётное число N (4 &#8804; N &#8804; 998).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести два простых числа, сумма которых равна числу N. Первым выводится наименьшее число.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6</td><td valign=top>3 3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>992</td><td valign=top>73 919</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=326" target="_blank">Задача №326</a><br>Сортировка и последовательности<br>Преобразование последовательности - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Задана последовательность, содержащая n целых чисел. Необходимо найти число, которое встречается в этой последовательности наибольшее количество раз, а если таких чисел несколько, то найти минимальное из них, и после этого переместить все такие числа в конец заданной последовательности. Порядок расположения остальных чисел должен остаться без изменения.
</p>
<p class=text>
Например, последовательность 1, 2, 3, 2, 3, 1, 2 после преобразования должна превратиться в последовательность 1, 3, 3, 1, 2, 2, 2.
</p>
<p class=text>
Требуется написать программу, которая решает данную задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число n — количество чисел во входной последовательности (3 &#8804; n &#8804; 100). Следующая строка содержит входную последовательность, состоящую из n целых чисел, не превышающих по модулю 100. Все числа в строке разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выводится последовательность чисел, которая получается в результате названного преобразования. Все числа в последовательности должны быть разделены пробелом.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>1 2 3 2 3 1 2</td><td valign=top>1 3 3 1 2 2 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=328" target="_blank">Задача №328</a><br>Комбинаторика<br>Точки на костях Домино</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Для того, чтобы заработать огромный капитал, новым русским необходимо иметь неординарное мышление. Конечно, при такой сложной работе, должны так же присутствовать какие то особенные механизмы для отдыха и развлечений. В этих целях в казино был придуман специальный набор домино для новых русских. Обычные кости домино представляют собой набор из различных комбинаций сочетаний двух плиток, на каждой из которых отображается от 0 до 6 точек. А этот набор представляет собой подобные сочетания плиток, но количество точек на каждой может быть от нуля до заданного значения, которое зависит от интеллектуального уровня игроков. В таком наборе костей присутствуют всевозможные сочетания плиток, но при этом ни одна из костей не повторяется (даже такие комбинации как 2-5 и 5-2 считаются одинаковыми).
</p>
<p class=text>
Для изготовления данного набора костей перед изготовителем встала проблема вычисления суммарного количества точек на всех костях домино. Это связано с тем, что домино для новых русских украшается бриллиантами, которые представляют собой точки на плитках и при изготовлении необходимо оценить стоимость. 
</p>
<p class=text>
Помогите написать программу, которая решит эту задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно натуральное число N – максимальное количество точек на одной плитке домино. (N <= 10000)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество бриллиантовых камней, которые необходимо изготовить для заданного набора костей.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2</td><td valign=top>12</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=329" target="_blank">Задача №329</a><br>Динамическое программирование<br>Лесенка-2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
Вова стоит перед лесенкой из N ступеней. На каждой из ступеней написаны произвольные целые числа. Первым шагом Вова может перейти на первую ступень или, перепрыгнув через первую, сразу оказаться на второй. Также он поступает и дальше, пока не достигнет N-ой ступени. Посчитаем сумму всех чисел, написанных на ступенях через которые прошел Вова.
</p>
<p class=text>
Требуется написать программу, которая определит оптимальный маршрут Вовы, при котором, шагая, он получит наибольшую сумму.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке натуральное число N – количество ступеней лестницы. Во второй строке через пробел заданы числа, написанные на ступенях лестницы, начиная с первой. Количество ступеней не превышает 1000, числа, написанные на ступенях, не превосходят по модулю 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать в первой строке наибольшее значение суммы. Во второй строке должны быть записаны через пробел номера ступеней по возрастанию, по которым должен шагать Вова.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>1 2 1</td><td valign=top>4<br>1 2 3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>1 -1 1</td><td valign=top>2<br>1 3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=330" target="_blank">Задача №330</a><br>Простая математика<br>Телепортация</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Вова попал на космическом корабле на бесконечную плоскую планету в точку с координатами (x<sub>1</sub>, y<sub>1</sub>). Вова, управляя кораблем, имеет возможность за одну секунду телепортироваться из точки (x, y) в одну из точек (x+C, y+C), (x+C, y-C), (x-C, y+C), (x-C, y-C), где C - произвольное натуральное число, которое можно изменять на каждом ходу.
</p>
<p class=text>
Требуется написать программу, которая определит, через какое минимальное время Вове удастся достичь точки (x<sub>2</sub>, y<sub>2</sub>).
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке числа x<sub>1</sub>, y<sub>1</sub>, во второй – x<sub>2</sub>, y<sub>2</sub>. Все числа целые от нуля до 10<sup>6</sup>. Точки (x<sub>1</sub>, y<sub>1</sub>) и (x<sub>2</sub>, y<sub>2</sub>) не совпадают.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – минимальное время телепортации. Если такая телепортация невозможна, то вывести 0.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0<br>0 2</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=331" target="_blank">Задача №331</a><br>Задачи для начинающих<br>Время прибытия</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Задано время отправления поезда и время в пути до конечной станции. Требуется написать программу, которая найдет время прибытия этого поезда (возможно, в другие сутки).
</p>
<p class=text>

</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит две строки. В первой строке задано время отправления, а во второй строке – время в пути. Время отправления задается в формате «HH:MM», где HH время в часах, которое принимает значение от 00 до 23, ММ – время в минутах, которое принимает значение от 00 до 59. Время в пути задается двумя неотрицательными целыми числами – количество часов и количество минут. Числа разделяются одним пробелом. Количество часов не превышает 120, минут – 59.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одну строку – время прибытия поезда на конечную станцию. Формат вывода этого времени совпадает с форматом ввода времени отправления.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>00:00<br>10 10</td><td valign=top>10:10</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>01:02<br>4 6</td><td valign=top>05:08</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>11:00<br>22 0</td><td valign=top>09:00</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=333" target="_blank">Задача №333</a><br>Целочисленная арифметика<br>Общие цифры</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Заданы натуральные числа A, B, C. Требуется написать программу, которая найдет общие цифры в этих числах.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит три натуральных числа A, B, C (1 &#8804; A, B, C &#8804; 10<sup>80</sup>). Числа разделены одним пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать в первой строке количество общих цифр, а во второй строке в порядке возрастания через один пробел общие цифры.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 2 3</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>12 13 14</td><td valign=top>1<br>1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1234 2345 3456</td><td valign=top>2<br>3 4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=347" target="_blank">Задача №347</a><br>Сортировка и последовательности<br>Покер</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
Имеется 5 целых чисел. Среди них:
</p>
<ul>
• если одинаковы 5, то вывести "Impossible", иначе<br>
• если одинаковы 4, то вывести "Four of a Kind", иначе<br>
• если одинаковы 3 и 2, то вывести "Full House", иначе<br>
• если есть 5 последовательных, то вывести "Straight", иначе<br>
• если одинаковы 3, то вывести "Three of a Kind", иначе<br>
• если одинаковы 2 и 2, то вывести "Two Pairs", иначе<br>
• если одинаковы 2, то вывести "One Pair", иначе<br>
• вывести "Nothing".
</ul>
<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 5 целых чисел от 1 до 13, разделенных пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести результат анализа.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 3 9 3 2</td><td valign=top>One Pair</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 5 5 4 4</td><td valign=top>Two Pairs</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 5 2 4 3</td><td valign=top>Straight</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>10 11 12 13 1</td><td valign=top>Nothing</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=349" target="_blank">Задача №349</a><br>Целочисленная арифметика<br>Простые числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Необходимо вывести все простые числа от M до N включительно.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа M и N, разделенных пробелом (2 <= M <= N <= 10<sup>6</sup>)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите в одной строке через пробел все простые числа от M до N в порядке возрастания. Если таковых чисел нет, то следует вывести «Absent».
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 5</td><td valign=top>2 3 5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 4</td><td valign=top>Absent</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=354" target="_blank">Задача №354</a><br>Целочисленная арифметика<br>Разложение на простые множители</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Требуется вывести представление целого числа N в виде произведения простых чисел.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число N (2 <= N <= 2<sup>31</sup>-1).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите список простых множителей числа N в порядке неубывания, разделенных знаком «*».
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>30</td><td valign=top>2*3*5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=368" target="_blank">Задача №368</a><br>Динамическое программирование<br>Маршрут</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
В таблице из N строк и N столбцов клетки заполнены цифрами от 0 до 9. Требуется найти такой путь из клетки (1, 1) в клетку (N, N), чтобы сумма цифр в клетках, через которые он пролегает, была минимальной; из любой клетки ходить можно только вниз или вправо.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N. В следующих N строках содержатся по N цифр без пробелов. (2 <= N <= 250)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите N строк по N символов. Символ  «#» (решетка) показывает, что маршрут проходит через эту клетку, а «.» (точка) - что не проходит. Если путей с минимальной суммой цифр несколько, можно вывести любой.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
943<br>
216<br>
091
</td><td valign=top>#..<br>
###<br>
..#
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=381" target="_blank">Задача №381</a><br>Теория графов<br>Lines</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 44%)</i></center>
<p class=text>
В таблице из N строк и N столбцов некоторые клетки заняты шариками, другие свободны. Выбран шарик, который нужно переместить, и место, куда его нужно переместить. Выбранный шарик за один шаг перемещается в соседнюю по горизонтали или вертикали свободную клетку. Требуется выяснить, возможно ли переместить шарик из начальной клетки в заданную, и, если возможно, то найти путь из наименьшего количества шагов.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N, в следующих N строках - по N символов. Символом точки обозначена свободная клетка, латинской заглавной O - шарик, @ - исходное положение шарика, который должен двигаться, латинской заглавной X - конечное положение шарика. (2 <= N <= 50)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите  в первой строке Yes, если движение возможно, или No, если нет. Если движение возможно, то далее следует вывести N строк по N символов - как и на вводе, но букву X, а также все точки по пути следует заменить плюсами. Если решений несколько, выведите любое.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
....X<br>
.OOOO<br>
.....<br>
OOOO.<br>
@....
</td><td valign=top>Yes<br>
+++++<br>
+OOOO<br>
+++++<br>
OOOO+<br>
@++++
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
..X..<br>
.....<br>
OOOOO<br>
.....<br>
..@..
</td><td valign=top>No</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=383" target="_blank">Задача №383</a><br>Целочисленная арифметика<br>Красивые числа - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Будем называть число красивым, если сумма его цифр в десятичной системе счисления делится на количество цифр в нем (в десятичной системе счисления).
</p>
<p class=text>
Необходимо найти N-ое в порядке возрастания красивое число.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое число N. (1 <= N <= 100 000)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>15</td><td valign=top>20</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=392" target="_blank">Задача №392</a><br>Сортировка и последовательности<br>Сдвиг перестановки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 24%)</i></center>
<p class=text>
<i>Перестановкой</i> порядка n называется последовательность из попарно различных целых положительных чисел p<sub>1</sub>, p<sub>2</sub>, ... , p<sub>n</sub>, где каждое 1 <= p<sub>i</sub> <= n. Будем говорить, что перестановка q<sub>1</sub>, q<sub>2</sub>, ... , q<sub>n</sub> лексикографически меньше перестановки p<sub>1</sub>, p<sub>2</sub>, . . . , p<sub>n</sub>, если существует такое i, что q<sub>i</sub> < p<sub>i</sub>, а для любого j < i p<sub>j</sub> = q<sub>j</sub> .
</p>
<p class=text>
<i>Циклическим сдвигом</i> на k перестановки p<sub>1</sub>, p<sub>2</sub>, ... , p<sub>n</sub> называется последовательность, p<sub>k+1</sub>, p<sub>k+2</sub>, ... , p<sub>n</sub>, p<sub>1</sub>, ... , p<sub>k</sub>. Отметим, что любой циклический сдвиг перестановки также является перестановкой.
</p>
<p class=text>
Ваша задача состоит в том, чтобы найти наименьший лексикографически циклический сдвиг заданной перестановки.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит порядок n (1 <= n <= 10<sup>5</sup>) заданной перестановки. Вторая строка содержит числа p<sub>1</sub>, p<sub>2</sub>, ... , p<sub>n</sub>, отделенные друг от друга пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите перестановку, являющуюся наименьшим лексикографически циклическим сдвигом перестановки, заданной во входном файле.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>3 2 1</td><td valign=top>1 3 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=426" target="_blank">Задача №426</a><br>Теория графов<br>Lines - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 50%)</i></center>
<p class=text>
В таблице из N строк и N столбцов некоторые клетки заняты шариками, другие свободны. Выбран шарик, который нужно переместить, и место, куда его нужно переместить. Выбранный шарик за один шаг перемещается в соседнюю по горизонтали или вертикали свободную клетку. Требуется выяснить, возможно ли переместить шарик из начальной клетки в заданную, и, если возможно, то найти путь из наименьшего количества шагов.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N, в следующих N строках - по N символов. Символом точки обозначена свободная клетка, латинской заглавной O - шарик, @ - исходное положение шарика, который должен двигаться, латинской заглавной X - конечное положение шарика. (2 <= N <= 250)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите  в первой строке «Y», если движение возможно, или «N», если нет. Если движение возможно, то далее следует вывести N строк по N символов - как и на вводе, но буква X, а также все точки по пути следует заменить плюсами. Если решений несколько, выведите любое.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
....X<br>
.OOOO<br>
.....<br>
OOOO.<br>
@....
</td><td valign=top>Y<br>
+++++<br>
+OOOO<br>
+++++<br>
OOOO+<br>
@++++
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
..X..<br>
.....<br>
OOOOO<br>
.....<br>
..@..
</td><td valign=top>N</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=431" target="_blank">Задача №431</a><br>Теория графов<br>Путь коня</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
Дана шахматная доска, состоящая из NxN клеток, несколько из них вырезано. Провести ходом коня через невырезанные клетки путь минимальной длины из одной заданной клетки в другую.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT задано число N (2 <= N <= 50). В следующих N строках содержится по N символов. Символом # обозначена вырезанная клетка, точкой - невырезанная клетка, @ - заданные клетки (таких символов два), соответствующие началу и концу пути коня.
</p>

<h2>Выходные данные</h2>

<p class=text>
Если путь построить невозможно, в выходной файл OUTPUT.TXT следует вывести "Impossible", в противном случае вывести такую же карту, как и на входе, но пометить все промежуточные положения коня символом @.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
.....<br>
.@@..<br>
.....<br>
.....<br>
.....
</td><td valign=top>...@.<br>
.@@..<br>
....@<br>
.....<br>
.....
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
@..@.<br>
..##.<br>
.....<br>
.....<br>
.....
</td><td valign=top>@..@.<br>
..##.<br>
.@..@<br>
..@..<br>
@....
</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5<br>
@....<br>
..#..<br>
.#...<br>
.....<br>
....@
</td><td valign=top>Impossible</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=440" target="_blank">Задача №440</a><br>Геометрия<br>Биатлон</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 24%)</i></center>
<p class=text>
На Зимних Олимпийских Играх традиционно проводятся соревнования по биатлону. Как известно, этот вид спорта содержит лыжные гонки и стрельбу по мишеням из винтовки. На каждом огневом рубеже расположены 5 мишеней. Каждая из них имеет форму круга радиусом 10 см, а расстояния между центрами соседних мишеней одинаковы и равны 25 см. Центры мишеней при этом расположены на одной горизонтали.
</p>
<p class=text>
Введем прямоугольную систему координат так, что начало координат расположено в центре самой левой мишени, ось Ox направлена вправо, а ось Oy - вверх. Таким образом, центры мишеней имеют координаты (0, 0), (25, 0), (50, 0), (75, 0) и (100, 0).
</p>
<p class=text>
Для информационного обеспечения проведения соревнований было решено разработать систему подсчета количества пораженных мишеней. Эта система по точкам, в которые попали пули после выстрелов спортсмена, должна определять количество пораженных мишеней. Мишень считается пораженной, если в нее попала хотя бы одна пуля (при этом, разумеется, если в мишень попали две или больше пуль, то попадание считается только один раз).
</p>
<p class=text>
На спринтерской гонке на каждом огневом рубеже у спортсмена есть 5 пуль. Вам даны координаты точек, в которые попали пули после выстрелов спортсмена. Определите количество пораженных мишеней.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит ровно пять строк: i-ая из них содержит два целых числа x<sub>i</sub> и y<sub>i</sub> - координаты точки, в которую попала пуля после i-ого выстрела спортсмена. Все числа во входном файле не превосходят 1000 по модулю.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите единственное число – число пораженных мишеней.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0<br>
25 0<br>
50 0<br>
75 0<br>
100 0
</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0<br>
0 0<br>
0 0<br>
75 0<br>
100 0
</td><td valign=top>3</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=465" target="_blank">Задача №465</a><br>Динамическое программирование<br>Последовательности из 0 и 1</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Рассмотрим последовательности длины N, состоящие из 0 и 1. Требуется написать программу, которая по заданному натуральному числу N определяет количество тех из них, в которых никакие две единицы не стоят рядом.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число N (1 <= N <= 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3</td><td valign=top>5</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=516" target="_blank">Задача №516</a><br>Целочисленная арифметика<br>2-простое число</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Число называется 2-простым, если являются простыми числа, составленные из цифр этого числа в возрастающем и убывающем порядках.
</p>
<p class=text>
Требуется написать программу, которая по заданному числу определит его 2-простоту.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число N (10 < N < 10<sup>9</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите сообщение «Yes», если число N является 2-простым и «No» - иначе.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>13</td><td valign=top>Yes</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>23</td><td valign=top>No</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=521" target="_blank">Задача №521</a><br>Математическое моделирование<br>Пасьянс старухи Шапокляк</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
На столе лежат колоды игральных карт. В самой тоненькой колоде – p карт, во второй – p+1, в третьей – p+2, …, в последней – k карт. Старуха Шапокляк раскладывает пасьянс. Беря в руки любую из колод, она, если число карт в ней четное, на место возвращает колоду, наполовину уменьшив число карт в ней (лишние убирает в ящик), а если количество карт в колоде нечетное, то утраивает их количество и добавляет еще одну карту, а уже тогда кладет колоду на стол (карт у нее в ящике для этой операции достаточно). Если в какой-то колоде остается две карты, она больше ее не трогает. Пасьянс сходится, если во всех колодах остается по две карты.
</p>
<p class=text>
Требуется написать программу, которая определит сходится ли пасьянс, и если сходится – сколько раз должна старуха Шапокляк брать со стола карты.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 2 числа, записанные через пробел (2 < p < k < 1000). 
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать 0, если пасьянс не сходится, и, если сходится, количество «ходов» старухи Шапокляк.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 3</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 8</td><td valign=top>28</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=525" target="_blank">Задача №525</a><br>Динамическое программирование<br>Сумма степеней двойки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<p class=text>
Любое натуральное число можно представить в виде суммы натуральных слагаемых, каждое из которых является степенью числа 2. Суммы, различающиеся лишь порядком слагаемых, считаются одинаковыми. Например, для числа 7 таких представлений 6 (4+2+1, 4+1+1+1, 2+2+2+1, 2+2+1+1+1, 2+1+1+1+1+1, 1+1+1+1+1+1+1).
</p>
<p class=text>
Требуется написать программу, которая найдет количество способов такого представления заданного числа N.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число N (1 <= N <= 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – найденное количество способов представления числа N.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>7</td><td valign=top>6</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=530" target="_blank">Задача №530</a><br>Двумерные массивы<br>Черно-белая графика</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Одна из базовых задач компьютерной графики – обработка черно-белых изображений. Изображения можно представить в виде прямоугольников шириной w и высотой h, разбитых на w&#215;h единичных квадратов, каждый из которых имеет либо белый, либо черный цвет. Такие единичные квадраты называются пикселами. В памяти компьютера сами изображения хранятся в виде прямоугольных таблиц, содержащих нули и единицы.
</p>
<p class=text>
Во многих областях очень часто возникает задача комбинации изображений. Одним из простейших методов комбинации, который используется при работе с черно-белыми изображениями, является попиксельное применение некоторой логической операции. Это означает, что значение пиксела результата получается применением этой логической операции к соответствующим пикселам аргументов. Логическая операция от двух аргументов обычно задается таблицей истинности, которая содержит значения операции для всех возможных комбинаций аргументов. </p>
<p class=text>
Например, для операции «исключающее ИЛИ» эта таблица выглядит так:
</p>
<center>
<table bgcolor=#003300 cellspacing=1 cellpadding=5>
<tr><th>Первый аргумент</th><th>Второй аргумент</th><th>Результат</th></tr>
<tr class=white align=center><td>0</td><td>0</td><td>0</td></tr>
<tr class=white align=center><td>0</td><td>1</td><td>1</td></tr>
<tr class=white align=center><td>1</td><td>0</td><td>1</td></tr>
<tr class=white align=center><td>1</td><td>1</td><td>0</td></tr>
</table>
</center>
<p class=text>
Требуется написать программу, которая вычислит результат попиксельного применения заданной логической операции к двум черно-белым изображениям одинакового размера.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два целых числа w и h (1 &#8804; w, h &#8804; 100). Последующие h строк описывают первое изображение и каждая из этих строк содержит w символов, каждый из которых равен нулю или единице. Далее следует описание второго изображения в аналогичном формате. Последняя строка входного файла содержит описание логической операции в виде четырех чисел, каждое из которых – ноль или единица. Первое из них есть результат применения логической операции в случае, если оба аргумента – нули, второе – результат в случае, если первый аргумент – ноль, второй – единица, третье – результат в случае, если первый аргумент – единица, второй – ноль, а четвертый – в случае, если оба аргумента – единицы.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести результат применения заданной логической операции к изображениям в том же формате, в котором изображения заданы во входном файле.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 3<br>
01000<br>
11110<br>
01000<br>
10110<br>
00010<br>
10110<br>
0110
</td><td valign=top>11110<br>
11100<br>
11110
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=576" target="_blank">Задача №576</a><br>Целочисленная арифметика<br>Гадание - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Маша недавно прочитала в книге «Теория чисел и предсказание будущего» о новом способе гадания. Способ заключается в следующем: надо выбрать целое положительное число N и посчитать количество чисел, меньших N и взаимно простых с ним. Это количество и будет результатом гадания.
</p>
<p class=text>
Поскольку гадать приходится достаточно часто, а процесс гадания достаточно трудоемок, Маша попросила вас написать программу, считающую результат гадания.
</p>
<p class=text>
Два числа называются <i>взаимно простыми</i>, если их наибольший общий делитель равен 1. <i>Наибольшим общим делителем</i> двух чисел a и b называется наибольшее целое положительное число, на которое делятся и a, и b.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое положительное число N (1 &#8804; N &#8804; 10<sup>5</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – результат гадания.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>13</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6</td><td valign=top>2</td></tr>
</table>
<br>

</body></html>